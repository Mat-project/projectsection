"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Try to import optional packages, with fallbacks if not installed
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv not installed, will use os.environ directly
    pass

try:
    from decouple import config
except ImportError:
    # decouple not installed, create a simple config function
    def config(key, default=None):
        return os.environ.get(key, default)

try:
    import dj_database_url
except ImportError:
    # dj_database_url not installed, create a simple function
    def dj_database_url_config(**kwargs):
        return {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    
    class dj_database_url:
        @staticmethod
        def config(default=None, **kwargs):
            return dj_database_url_config(**kwargs)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="unsafe-secret-for-dev")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Turn off debug in production

# Update ALLOWED_HOSTS to include all necessary domains
ALLOWED_HOSTS = [
    'lktool.onrender.com',  # Your backend domain
    'localhost',
    '127.0.0.1',
]

# Custom user model - this must come BEFORE the auth app is used
AUTH_USER_MODEL = 'users.CustomUser'

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "users",
    "contact",  # Add the new contact app
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
]

MIDDLEWARE = [
    'django.middleware.cache.UpdateCacheMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    'django.middleware.gzip.GZipMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'admin_api.middleware.AdminAuthMiddleware',  # Updated path - moved middleware to its own file
    'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = "backend.urls"

# React/SPA configuration
REACT_APP_DIR = os.path.join(BASE_DIR, '..', 'Frontend', 'dist')  # Fix the path to point to the actual Vite build

# Serve static files
STATIC_URL = '/'
STATICFILES_DIRS = [
    REACT_APP_DIR,  # this includes index.html & the assets/ subfolder
]

# Optional but recommended: compressed manifest storage for cacheâ€‘busting
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Add Django cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Cache timeouts
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'lktool'

# Add React build directory to templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [REACT_APP_DIR],  # Add React build directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database configuration with connection pooling
DATABASES = {
    'default': {
        **dj_database_url.config(default=os.environ.get("DATABASE_URL")),
        'CONN_MAX_AGE': 600,  # Keep connections alive for 10 minutes
        'OPTIONS': {
            'connect_timeout': 5,  # Reduce connection timeout to 5 seconds
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Add these settings for JWT Authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Change this from AllowAny to IsAuthenticated
    ],
}

# Simple JWT settings optimized for performance
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,  # Track last login time
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'TOKEN_USER_CLASS': 'users.CustomUser',  # Your custom user model
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

# Optimize CORS settings for better performance
CORS_ALLOWED_ORIGINS = [
    "https://lktools.onrender.com",
    "https://projectsection-ten.vercel.app",
    "http://localhost:5173",
    "http://localhost:3000",
]

# Add this for persistent connections
CORS_ALLOW_CREDENTIALS = True

# Enable preflight caching to reduce OPTIONS requests
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours in seconds

# Define allowed headers explicitly
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',  # Standard header - ensure it's included
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'expires',
]

# Important: Keep this setting off in production
CORS_ALLOW_ALL_ORIGINS = False

# Email Configuration - Properly load from environment
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')

# Handle environment variables with quotes
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', '')
if DEFAULT_FROM_EMAIL and (DEFAULT_FROM_EMAIL.startswith('"') and DEFAULT_FROM_EMAIL.endswith('"')):
    DEFAULT_FROM_EMAIL = DEFAULT_FROM_EMAIL[1:-1]
if not DEFAULT_FROM_EMAIL:
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER or 'noreply@yoursite.com'

# Frontend URL for email verification links
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'https://projectsection-ten.vercel.app/')

# Email background processing setting
SEND_VERIFICATION_EMAIL = True 

# Admin email for receiving contact form submissions
ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL', DEFAULT_FROM_EMAIL)

# Add email debugging in development
if DEBUG:
    print("\n--- Email Configuration ---")
    print(f"EMAIL_BACKEND: {EMAIL_BACKEND}")
    print(f"EMAIL_HOST: {EMAIL_HOST}")
    print(f"EMAIL_PORT: {EMAIL_PORT}")
    print(f"EMAIL_USE_TLS: {EMAIL_USE_TLS}")
    print(f"EMAIL_HOST_USER: {EMAIL_HOST_USER}")
    print(f"EMAIL_HOST_PASSWORD: {'*' * 8 if EMAIL_HOST_PASSWORD else 'Not set'}")
    print(f"DEFAULT_FROM_EMAIL: {DEFAULT_FROM_EMAIL}")
    print(f"FRONTEND_URL: {FRONTEND_URL}")
    print("-------------------------\n")

# Enhanced email logging
if not DEBUG and os.environ.get('EMAIL_HOST_USER') and os.environ.get('EMAIL_HOST_PASSWORD'):
    print("\n--- Production Email Configuration ---")
    print(f"EMAIL_HOST: {EMAIL_HOST}")
    print(f"EMAIL_PORT: {EMAIL_PORT}")
    print(f"EMAIL_HOST_USER: {EMAIL_HOST_USER}")
    print(f"DEFAULT_FROM_EMAIL: {DEFAULT_FROM_EMAIL}")
    print(f"ADMIN_EMAIL: {ADMIN_EMAIL}")
    print("-----------------------------------\n")
    
    # Test email configuration on startup
    try:
        from django.core.mail import send_mail
        print("Testing email configuration...")
        send_mail(
            subject="LK Tool Box - Email Configuration Test",
            message="This is an automated test email to confirm email configuration is working properly.",
            from_email=DEFAULT_FROM_EMAIL,
            recipient_list=[ADMIN_EMAIL],
            fail_silently=False,
        )
        print("Test email sent successfully")
    except Exception as e:
        print(f"WARNING: Email configuration test failed: {e}")

# Production security settings
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# If behind a proxy/load balancer (like Render uses)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Additional security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# Trust the Vercel frontend origin for CSRF
CSRF_TRUSTED_ORIGINS = [
    'https://projectsection-ten.vercel.app',
    'https://lktools.onrender.com',
    'http://localhost:5173',
]

# Set X-Frame-Options to deny by default
X_FRAME_OPTIONS = 'DENY'

# Admin Credentials (loaded from environment variables)
ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD')
